{"version":3,"sources":["mock-backend.js","App.js","reportWebVitals.js","index.js"],"names":["albums","Styles","styled","div","Table","columns","data","storedSortBy","localStorage","getItem","sortByData","JSON","parse","id","desc","useTable","initialState","pageIndex","sortBy","useSortBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","state","setItem","stringify","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","style","backgroundColor","isSorted","render","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","App","useState","setData","isLoaded","setIsLoaded","setErr","useEffect","isSuccess","timeoutValue","Promise","resolve","reject","setTimeout","mockFetchHelper","then","res","err","Header","accessor","item","avg_user_rating","toFixed","genres","join","Cell","dateTime","value","format","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa8f1634.chunk.js","sourcesContent":["let albums = [\n    {\n      \"album_title\": \"Count Bateman\",\n      \"avg_user_rating\": 8.786,\n      \"band_name\": \"Frog\",\n      \"genres\": [\"Indie Rock\", \"Acoustic\"],\n      \"last_listened\": 1609528990000,\n      \"release_date\": \"2019/08/16\",\n    },\n    {\n      \"album_title\": \"Stay Positive\",\n      \"avg_user_rating\": 9.234,\n      \"band_name\": \"The Hold Steady\",\n      \"genres\": [\"Rock\", \"Punk\"],\n      \"last_listened\": 1611766459503,\n      \"release_date\": \"2008/07/15\",\n    },\n    {\n      \"album_title\": \"Courting Strong\",\n      \"avg_user_rating\": null,\n      \"band_name\": \"Martha\",\n      \"genres\": [\"Punk\", \"Indie Rock\"],\n      \"last_listened\": 1610471530000,\n      \"release_date\": \"2014/05/26\"\n    },\n    {\n      \"album_title\": \"Born Like This\",\n      \"avg_user_rating\": 7.983,\n      \"band_name\": \"MF Doom\",\n      \"genres\": [\"Hip-hop\", \"Rap\"],\n      \"last_listened\": 1607951459000,\n      \"release_date\": \"2009/03/24\"\n    },\n    {\n      \"album_title\": \"Giant Steps\",\n      \"avg_user_rating\": 8.444,\n      \"band_name\": \"John Coltrane\",\n      \"genres\": [\"Jazz\"],\n      \"last_listened\": 1608786659000,\n      \"release_date\": \"1960/02/01\"\n    }\n  ];\n\nexport function mockFetchHelper(\n    isSuccess=true,\n    timeoutValue=1000\n) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (isSuccess) {\n                resolve(albums);\n            } else {\n                reject('Fetching data failed');\n            }\n        }, timeoutValue);\n    });\n}","import React, {useState, useEffect } from 'react';\nimport styled from 'styled-components'\nimport { useTable, useSortBy } from 'react-table'\nimport dateTime from 'dayjs';\nimport { mockFetchHelper } from './mock-backend';\nimport './App.css';\n\n\nconst Styles = styled.div `\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border: 1px solid black;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 1rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({columns, data}) {\n  const storedSortBy = localStorage.getItem('sortBy');\n  const sortByData = storedSortBy? JSON.parse(storedSortBy) : [{\n    id: 'last_listened',\n    desc: true\n  }];\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows,\n    state: { sortBy },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { \n        pageIndex: 0,\n        sortBy: sortByData\n      },\n    },\n    useSortBy\n  )\n\n  localStorage.setItem('sortBy', JSON.stringify(sortBy));\n  return (\n    <>\n       <table {...getTableProps()}>\n       <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                style={{backgroundColor: column.isSorted? '#add8e6': \"transparent\"}}\n                >\n                  {column.render('Header')}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n         <tbody {...getTableBodyProps()}>\n          {rows.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                  })}\n                </tr>\n              )}\n          )}\n        </tbody>\n      </table>  \n    </>\n\n  )\n}\n\nfunction App() {\n\n  let [data, setData] = useState([]);\n  let [isLoaded, setIsLoaded] = useState(false);\n  let [err, setErr] = useState(null);\n  useEffect(() => {\n  const getData = () => {\n      mockFetchHelper()\n          .then(res => {\n              setData(res)\n              setIsLoaded(true)\n          },\n          err => {\n              setErr(err)\n              setIsLoaded(true)\n          })\n  };\n  getData()\n  }, [])\n\n \n  const columns = [\n    {\n      Header: 'Album Title',\n      accessor: 'album_title'\n    }, \n    {\n      Header: 'Avg User Rating',\n      accessor: item =>  item.avg_user_rating?item.avg_user_rating.toFixed(1): null,\n    }, \n    {\n      Header: 'Band Name',\n      accessor: 'band_name'\n    }, \n    {\n      Header: 'Genres',\n      accessor:  item => item.genres.join(',')\n    }, \n    {\n      Header: 'Last Played',\n      accessor: 'last_listened',\n      Cell: item =>{\n        return dateTime(item.value).format('MM/DD/YYYY HH:MM a')\n      }\n    }\n    , \n    {\n      Header: 'Release Date',\n      accessor: 'release_date'\n    }\n  ]\n\n  if(!isLoaded) {\n    return (\n      <div className=\"loader\">\n      </div>\n    )\n  }\n  return (\n    <Styles>\n      <Table data={data} columns={columns}/>\n    </Styles>\n  )\n\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}